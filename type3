from tkinter import *
import random
import time
from tkinter import Frame, messagebox

def choose_game_mode():
    result = messagebox.askquestion("Game Mode", "Do you want to play Player vs Player?")
    return result == 'yes'

def next_turn(row, column):
    global player, x_time, o_time, start_time, k,g
    if x_time == 0:
        label.config(text=(players[0] + "'s time is over.So " + players[1] + " wins"))
    elif o_time == 0:
        label.config(text=(players[1] + "'s time is over.So " + players[0] + " wins"))

    if buttons[row][column]['text'] == "" and check_winner() is False and x_time != 0 and o_time != 0:

        if player == players[0]:
            buttons[row][column]['text'] = player

            if check_winner() is False and x_time != 0:
                player = players[1]
                if g == 1:
                 computer_move()

            # label.config(text=f"{player}'s turn. You have {o_time // 60}:{o_time % 60} remaining.")

            elif check_winner() is True or o_time == 0:
                label.config(text=(players[0] + " wins"))
                k = 1

            elif check_winner() == "Tie":
                label.config(text="Tie!")
                k = 1

        else:

            buttons[row][column]['text'] = player
            if g==1:
                computer_move()

            if check_winner() is False and o_time != 0:
                player = players[0]
            # label.config(text=f"{player}'s turn. You have {x_time // 60}:{x_time % 60} remaining.")

            elif check_winner() is True or x_time == 0:
                label.config(text=(players[1] + " wins"))
                k = 1


            elif check_winner() == "Tie":
                label.config(text="Tie!")
                k = 1

def computer_move():
    global player, players, k
    available_moves = [(row, col) for row in range(3) for col in range(3) if buttons[row][col]['text'] == ""]
    if available_moves:
        row, col = random.choice(available_moves)
        buttons[row][col]['text'] = player
        if check_winner() is False and o_time != 0:
            player = players[0]
        # label.config(text=f"{player}'s turn. You have {x_time // 60}:{x_time % 60} remaining.")

        elif check_winner() is True or x_time == 0:
            label.config(text=(players[1] + " wins"))
            k = 1


        elif check_winner() == "Tie":
            label.config(text="Tie!")
            k = 1

def update_timers_display():
    global player, x_time, o_time, start_time, k
    if player == players[0]:
        x_time -= 1
        if k == 0:
            label.config(text=f"{player}'s turn. You have {x_time // 60}:{x_time % 60} remaining.")
    else:
        o_time -= 1
        if k == 0:
            label.config(text=f"{player}'s turn. You have {o_time // 60}:{o_time % 60} remaining.")
    if x_time == 0:
        label.config(fg="red")
        label.config(text=(players[0] + "'s time is over.So " + players[1] + " wins"))

        k = 1
    elif o_time == 0:
        label.config(fg="red")
        label.config(text=(players[1] + "'s time is over.So " + players[0] + " wins"))
        k = 1
    if k == 0:
        timer_label.config(
            text=f"{players[0]}: {x_time // 60}:{x_time % 60}  {players[1]}: {o_time // 60}:{o_time % 60}")
        window.after(1000, update_timers_display)  # Update every 1000 milliseconds (1 second)
    else:
        timer_label.config(
            text=f"{players[0]}: {x_time // 60}:{x_time % 60}  {players[1]}: {o_time // 60}:{o_time % 60}")


def check_winner():
    for row in range(3):
        if buttons[row][0]['text'] == buttons[row][1]['text'] == buttons[row][2]['text'] != "":
            buttons[row][0].config(bg="green")
            buttons[row][1].config(bg="green")
            buttons[row][2].config(bg="green")
            return True

    for column in range(3):
        if buttons[0][column]['text'] == buttons[1][column]['text'] == buttons[2][column]['text'] != "":
            buttons[0][column].config(bg="green")
            buttons[1][column].config(bg="green")
            buttons[2][column].config(bg="green")
            return True

    if buttons[0][0]['text'] == buttons[1][1]['text'] == buttons[2][2]['text'] != "":
        buttons[0][0].config(bg="green")
        buttons[1][1].config(bg="green")
        buttons[2][2].config(bg="green")
        return True

    elif buttons[0][2]['text'] == buttons[1][1]['text'] == buttons[2][0]['text'] != "":
        buttons[0][2].config(bg="green")
        buttons[1][1].config(bg="green")
        buttons[2][0].config(bg="green")
        return True

    elif empty_spaces() is False:

        for row in range(3):
            for column in range(3):
                buttons[row][column].config(bg="yellow")
        return "Tie"

    else:
        return False


def empty_spaces():
    spaces = 9

    for row in range(3):
        for column in range(3):
            if buttons[row][column]['text'] != "":
                spaces -= 1

    if spaces == 0:
        return False
    else:
        return True


def new_game():
    global player

    player = "x"
    global x_time, o_time, start_time, k,g
    is_player_vs_player = choose_game_mode()
    k = 0
    x_time = 120
    o_time = 120
    start_time = time.time()
    label.config(text=f"{player}'s turn. You have {x_time // 60}:{x_time % 60} remaining.")
    timer_label.config(text=f"{players[0]}: {x_time // 60}:{x_time % 60}  {players[1]}: {o_time // 60}:{o_time % 60}",
                       font=('consolas', 15))
    if k == 0:
        update_timers_display()
    else:
        timer_label.config(
            text=f"{players[0]}: {x_time // 60}:{x_time % 60}  {players[1]}: {o_time // 60}:{o_time % 60}")

    for row in range(3):
        for column in range(3):
            buttons[row][column].config(text="", bg="#F0F0F0")
    if is_player_vs_player:
        print("Player vs Player")
        # Player vs Player mode
    else:
        g = 1

# Main code starts here

window = Tk()
window.title("Tic-Tac-Toe")

# Check game mode
is_player_vs_player = choose_game_mode()

players = ["x", "o"]
player = "x"
global x_time, o_time, k,g
k = 0
g=0
x_time = 12
o_time = 12
start_time = time.time()
buttons = [[0, 0, 0],
           [0, 0, 0],
           [0, 0, 0], ]
label = Label(text=f"{player}'s turn. You have {x_time // 60}:{x_time % 60} remaining.", font=('consolas', 25),
              fg="black")  # Set text color

label.pack(side="top")
timer_label = Label(
    text=f"{players[0]}: {x_time // 60}:{x_time % 60}  {players[1]}: {o_time // 60}:{o_time % 60}",
    font=('consolas', 15), fg="blue")  # Set text color

timer_label.pack(side="top")
reset_button = Button(text="Restart", font=('consolas', 20), command=new_game,
                      bd=5, relief=GROOVE, bg="lightgray")  # Add border, relief, and background color
reset_button.pack(side="top", pady=10)  # Add vertical padding


frame = Frame(window, bg="white")  # Set background color
frame.pack(pady=10)  # Add vertical padding


for row in range(3):
    for column in range(3):
        buttons[row][column] = Button(frame, text="", font=('consolas', 20), width=4, height=2,
                                      command=lambda row=row, column=column: next_turn(row, column),
                                      bd=5, relief=GROOVE)  # Add border and relief
        buttons[row][column].grid(row=row, column=column, padx=5, pady=5)  # Add padding


if is_player_vs_player:
    print("Player vs Player")
    # Player vs Player mode
else:
    g=1
    # Player vs Computer mode
timer_label.config(
    text=f"{players[0]}: {x_time // 60}:{x_time % 60}  {players[1]}: {o_time // 60}:{o_time % 60}")
update_timers_display()

window.mainloop()
